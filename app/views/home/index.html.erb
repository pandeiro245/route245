<div id="street-view"></div>
<div id="map-view"></div>
<div id="over-view">残り24:00</div>

<script src="https://cdn.jsdelivr.net/npm/@turf/turf@5/turf.min.js"></script> 
<script>
const WAIT_SECOND = 5;
const LIMIT = (60 / WAIT_SECOND) * 24;
let panorama;
let heading, lat, lng;
let locations = {};
let Links, goal_heading;

if(location.hash.length < 3){
  // takadano baba
  lat = 35.712996;
  lng = 139.7048636;
  heading = 90;
} else {
  i = location.hash.replace(/#/, '').split(',')
  lat = parseFloat(i[0]);
  lng = parseFloat(i[1]);
  heading = parseFloat(i[2]);
}

function initMap() {
  let count = 0, timer_id;

  // ストリートビューの表示
  panorama = new google.maps.StreetViewPanorama(
    document.getElementById('street-view'), {
      position: {lat: lat, lng: lng},
      pov: {
        heading: heading,
        pitch: 0
      },
      zoom: 1
    }
  );

  map = new google.maps.Map(document.getElementById("map-view"), {
    zoom : 18,
    center: new google.maps.LatLng(lat, lng)
  });
  marker = new google.maps.Marker({
    position: {lat: lat, lng: lng},
    map: map
  });


  Links = panorama.getLinks();

  google.maps.event.addListener(panorama, 'status_changed', function () {
    if (panorama.getStatus() == "OK") {
      Links = panorama.getLinks();

      if (count > LIMIT) {
        alert('24分集中完了！');
        location.reload();
      }

      setTimeout(
        function () {
          let target = 0;
          i = location.hash.replace(/#/, '').split(',')
          lat = parseFloat(i[0])
          lng = parseFloat(i[1])
          heading = parseFloat(i[2]);

          map.panTo(new google.maps.LatLng(lat, lng))

          marker = new google.maps.Marker({
            position: {lat: lat, lng: lng},
            map: map
          });

          //現在向ている方向に近いlinkを選択
          // let val = 360;
          // let currentPov = panorama.getPov();
          // Links.forEach(function (element, index) {
          //   let ans = Math.abs(currentPov.heading - element.heading);
          //   if (val > ans) {
          //     val = ans;
          //     target = index;
          //   }
          // });

          // 目的地に近い方向に向いているLinkを選択
					let goal = [35.6594494, 139.7006542]; // shibuya
					let goal_point = turf.point([goal[1], goal[0]]);
					let current_point = turf.point([lng, lat]);
          let val = 360;
          goal_heading = turf.bearing(current_point, goal_point);
          if(goal_heading < 0){
            goal_heading += 360;
          }

          data = {
            goal_heading: goal_heading,
            links: []
          };


          Links.forEach(function (element, index) {
            let ans = Math.abs(goal_heading - element.heading);

            let link = {
              ans: ans,
              heading: element.heading,
            };

            if (val > ans) {
              val = ans;
              target = index;
            }
            data['links'].push(link);
          });

          data['target_heading'] = Links[target].heading
          data['target_ans'] = Math.abs(goal_heading - Links[target].heading);
          
          console.log(data);

					key = lat + ',' + lng;
          if(typeof(locations[key]) != 'undefined') {
            if(typeof(locations[key][target]) != 'undefined') {
              if(target != 0) {
                target -= 1;
              } else {
                target = Links.length - 1;
              }
              // console.log('more than twice')
            } else {
              // console.log('first direction')
            }
          } else {
            // console.log('first spot')
          }

          heading = Links[target].heading

          // 次に移動するLink先に向きを変える
          panorama.setPov({
            heading: heading,
            pitch: 0
          });
          // 次のストリートビューに移動する
          panorama.setPano(Links[target]['pano']);
          count++;
          remain = 24 * 60 - count * 5;
          min = parseInt(remain / 60);
          sec = remain - min * 60;
          if(typeof(locations[lat + ',' + lng]) == 'undefined'){
            locations[lat + ',' + lng] = {};
          }
          if(typeof(locations[lat + ',' + lng][target]) == 'undefined'){
            locations[lat + ',' + lng][target] = 1
          }else{
            locations[lat + ',' + lng][target] += 1
          }
          document.getElementById('over-view').innerHTML = '残り'+ min + ':' + sec + '<br/>lat: ' + lat + ', lng: ' + lng;
          lat = panorama.getPosition()["lat"]();
          lng = panorama.getPosition()["lng"]();
          location.hash = lat + ',' + lng + ',' + heading
        },
        WAIT_SECOND * 1000
      );
    }
  });

  google.maps.event.addListener(map, 'dragend', function () {
  // google.maps.event.addListener(map, 'mouseout', function () {
    location.hash = map.center.lat() + ',' + map.center.lng() + ',' + heading
    location.reload();
  });
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC3dGkF7iYkFxxqzf5YS7Q5FCqWx0oq4vI&callback=initMap&v=3&libraries=drawing"
    async defer></script>
